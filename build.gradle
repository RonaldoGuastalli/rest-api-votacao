buildscript {
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:2.1.7.RELEASE"
    }
}

plugins {
    id 'java'
    id "jacoco"
    id "org.sonarqube" version "2.8"
    id "org.flywaydb.flyway" version "6.3.3"
    id 'org.springframework.boot' version '2.2.6.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
}

sourceCompatibility = JavaVersion.VERSION_11

flyway {
    url = 'jdbc:mysql://localhost:3306/sessao-votacao'
    user = 'root'
    password = 'admin'
}

jacoco {
    toolVersion = "0.8.3"
}

test {
    useJUnitPlatform()
}

dependencies {
    compile project(":contract")
    compile project(":message")
}

allprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'java-library'
    apply plugin: 'io.spring.dependency-management'

    group 'br.com.rjguastalli'
    version '1.0'
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11

    jacoco {
        toolVersion = "0.8.5"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    ext {
        set('springBootVersion', "2.1.7.RELEASE")
        set('springBootAdminVersion', "2.1.5")
        set('junitVersion', '5.5.0-M1')
        set('lombokVersion', '1.18.12')
        set('swaggerUi', '2.9.2')
        set('swagger', '2.9.2')
        set('postgresqlVersion', '42.2.12')

    }

    test {
        useJUnitPlatform()
    }

    dependencyManagement {
        imports {
            mavenBom "org.junit:junit-bom:${junitVersion}"
            mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
            mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"

        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        compile "io.springfox:springfox-swagger2:${swagger}"
        compile "io.springfox:springfox-swagger-ui:${swaggerUi}"
        compile("org.postgresql:postgresql:${postgresqlVersion}")
        compileOnly "org.projectlombok:lombok:${lombokVersion}"
        annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
        implementation 'org.flywaydb:flyway-core'
        testCompile group: 'com.h2database', name: 'h2', version: '1.3.148'
        compile("com.h2database:h2:1.4.191")
        testCompile group: 'org.mockito', name: 'mockito-core', version: '3.1.0'
        testCompile group: 'org.mockito', name: 'mockito-inline', version: '3.1.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-api'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
        testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
        testImplementation('org.junit.jupiter:junit-jupiter:5.6.1')
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
            exclude module: 'junit'
        }
        compile('ch.qos.logback:logback-classic:1.1.7') {
            exclude group: 'org.slf4j', module: 'slf4j-api'
        }

    }


}

sonarqube {
    file("$buildDir/classes").mkdirs()
    properties {
        property 'sonar.projectKey', 'RonaldoGuastalli_sessao-votacao'
        property 'sonar.organization', 'ronaldoguastalli'
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.exclusions', ["**/ApiProperties.java", "**/util/**", "**/config/**", "**/doc/**"]
    }
}


task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets it.sourceSets.main
    }

    reports {
        html.enabled true
//        html.destination file("${buildDir}/reports/jacoco")
        csv.enabled false
        xml.enabled true
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}



